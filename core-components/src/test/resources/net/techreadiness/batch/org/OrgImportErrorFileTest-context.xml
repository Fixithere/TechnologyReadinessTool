<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cxf="http://cxf.apache.org/core" xmlns:jaxws="http://cxf.apache.org/jaxws"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd">

	<context:component-scan base-package="net.techreadiness" />
	<context:annotation-config />
<!-- 	<aop:aspectj-autoproxy /> -->
	
<!-- 	<aop:config expose-proxy="true"/> -->

	<bean id="serviceContext" class="net.techreadiness.service.ServiceContext">
<!-- 		<aop:scoped-proxy/> -->
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<bean class="net.techreadiness.service.DataModificationStatus">
		<aop:scoped-proxy/>
	</bean>
	
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="net.techreadiness"/>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="databasePlatform" value="org.hibernate.dialect.H2Dialect" />
			</bean>
		</property>

		<property name="jpaPropertyMap">
			<map>
				<entry key="hibernate.cache.use_query_cache" value="false"/>
				<entry key="hibernate.cache.use_second_level_cache" value="false"/>
				<entry key="hibernate.generate_statistics" value="false"/>
                <entry key="hibernate.hbm2ddl.auto" value="create-drop"/>
			</map>
		</property>
	</bean>

    <bean id="dataSource" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="org.h2.Driver"/>
        <property name="url" value="jdbc:h2:mem:core_org_import"/>
    </bean>

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
        <property name="dataSource" ref="dataSource" />
    </bean>

	<bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

<!-- 	<bean id="resourcelessTransactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager"/> -->

	<bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
		<property name="isolationLevelForCreate" value="ISOLATION_DEFAULT"/>
		<property name="transactionManager" ref="transactionManager" />
	</bean>

	<bean class="org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor">
		<property name="jobRegistry" ref="jobRegistry" />
	</bean>

	<bean id="jobRegistry" class="org.springframework.batch.core.configuration.support.MapJobRegistry" />

	<bean id="blackHoleWriter" class="net.techreadiness.batch.BlackHoleItemWriter" />

	<bean id="orgFieldSetMapper" class="net.techreadiness.batch.CoreFieldSetMapper">
		<constructor-arg value="net.techreadiness.batch.org.OrgData" />
		<property name="binder" ref="orgBinder" />
	</bean>

	<bean id="orgMappingProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="location" value="classpath:net/techreadiness/batch/org/org-import-mapping.properties" />
	</bean>

	<bean id="orgBinder" class="net.techreadiness.batch.Binder">
		<constructor-arg ref="orgMappingProperties" />
	</bean>

	<bean id="orgLineTokenizer" scope="step" class="net.techreadiness.batch.org.OrgLineTokenizer" />

	<bean id="orgLineMapper" class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
		<property name="lineTokenizer" ref="orgLineTokenizer" />
		<property name="fieldSetMapper" ref="orgFieldSetMapper" />
	</bean>

	<bean id="orgCoreLineMapper" class="net.techreadiness.batch.CoreLineMapper">
		<property name="delegate" ref="orgLineMapper" />
	</bean>

	<bean id="orgReader" scope="step" class="org.springframework.batch.item.file.FlatFileItemReader">
		<property name="resource" value="#{jobParameters['jobFileName']}" />
		<property name="lineMapper" ref="orgCoreLineMapper" />
		<property name="linesToSkip" value="1" />
	</bean>

	<bean id="orgWriter" scope="step" class="net.techreadiness.batch.org.OrgWriter">
		<property name="fileId" value="#{jobParameters['jobFileId']}" />
		<property name="scopeId" value="#{jobParameters['jobScopeId']}" />
		<property name="userId" value="#{jobParameters['jobUserId']}" />
		<property name="orgId" value="#{jobParameters['jobOrgId']}" />
	</bean>

	<bean id="orgMatchingItemProcessor" class="org.springframework.batch.item.support.CompositeItemProcessor">
		<property name="delegates">
			<list>
				<bean class="net.techreadiness.batch.org.OrgMatchingItemProcessor" scope="step">
					<property name="fileId" value="#{jobParameters['jobFileId']}" />
					<property name="scopeId" value="#{jobParameters['jobScopeId']}" />
					<property name="userId" value="#{jobParameters['jobUserId']}" />
					<property name="orgId" value="#{jobParameters['jobOrgId']}" />
				</bean>
			</list>
		</property>
	</bean>

	<batch:job id="csvOrgImport">
	<!-- Not testing this step  -->
<!-- 		<batch:step id="orgItemCount" next="orgImport"> -->
<!-- 			<batch:tasklet> -->
<!-- 				<batch:chunk reader="orgReader" writer="blackHoleWriter" commit-interval="100" /> -->
<!-- 			</batch:tasklet> -->
<!-- 			<batch:listeners> -->
<!-- 				<batch:listener> -->
<!-- 					<bean class="net.techreadiness.batch.ItemCountStepListener" scope="step"> -->
<!-- 						<property name="fileId" value="#{jobParameters['jobFileId']}" /> -->
<!-- 						<property name="scopeId" value="#{jobParameters['jobScopeId']}" /> -->
<!-- 						<property name="userId" value="#{jobParameters['jobUserId']}" /> -->
<!-- 						<property name="orgId" value="#{jobParameters['jobOrgId']}" /> -->
<!-- 					</bean> -->
<!-- 				</batch:listener> -->
<!-- 			</batch:listeners> -->
<!-- 		</batch:step> -->
		<batch:step id="orgImport">
			<batch:tasklet>
				<batch:chunk reader="orgReader" processor="orgMatchingItemProcessor" writer="orgWriter" commit-interval="1"
					skip-limit="50">
					<batch:skippable-exception-classes>
						<batch:include class="java.lang.Exception" />
						<batch:include class="java.io.FileNotFoundException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
				<batch:listeners>
					<batch:listener>
						<bean class="net.techreadiness.batch.CoreItemListener" scope="step">
						    <property name="fileName" value="#{jobParameters['jobFileName']}" />
							<property name="fileId" value="#{jobParameters['jobFileId']}" />
							<property name="scopeId" value="#{jobParameters['jobScopeId']}" />
							<property name="userId" value="#{jobParameters['jobUserId']}" />
							<property name="orgId" value="#{jobParameters['jobOrgId']}" />
						</bean>
					</batch:listener>
				</batch:listeners>
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener>
				<bean class="net.techreadiness.batch.listener.JobCompletionListener" scope="prototype"/>
			</batch:listener>
		</batch:listeners>
	</batch:job>
	
	<bean id="messageSource"  class="net.techreadiness.text.CoreResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>customer</value>
				<value>exceptions</value>
			</list>
		</property>
	</bean>
	
	<bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jobFactory">
			<bean
				class="net.techreadiness.batch.scheduler.AutowiringSpringBeanJobFactory" />
		</property>
		<property name="autoStartup" value="false" />
		<property name="quartzProperties">
			<props>
				<prop key="org.quartz.scheduler.instanceName">CoreScheduler</prop>
				<prop key="org.quartz.scheduler.instanceId">AUTO</prop>
				<prop key="org.quartz.threadPool.threadCount">1</prop>

				<prop key="org.quartz.jobStore.class">org.quartz.simpl.RAMJobStore</prop>
				<prop key="org.quartz.jobStore.misfireThreshold">60000</prop>
				<prop key="org.quartz.jobStore.isClustered">false</prop>
			</props>
		</property>
		<property name="applicationContextSchedulerContextKey" value="applicationContext" />
	</bean>
</beans>
